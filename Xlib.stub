;; -*- mode:scheme -*-

(c-system-include "X11/Xlib.h")
(c-system-include "X11/Xutil.h")

;; Unification for types lacking the X prefix.
(c-declare "typedef Atom XAtom;")
(c-declare "typedef Colormap XColormap;")
(c-declare "typedef Drawable XDrawable;")
(c-declare "typedef Font XFont;")
(c-declare "typedef GContext XGContext;")
(c-declare "typedef KeySym XKeySym;")
(c-declare "typedef Mask XMask;")
(c-declare "typedef Pixmap XPixmap;")
(c-declare "typedef Status XStatus;")
(c-declare "typedef Time XTime;")
(c-declare "typedef VisualID XVisualID;")
(c-declare "typedef Window XWindow;")
(c-declare "typedef Depth XDepth;")
(c-declare "typedef Display XDisplay;")
(c-declare "typedef GC XGC;")
(c-declare "typedef Screen XScreen;")
(c-declare "typedef ScreenFormat XScreenFormat;")
(c-declare "typedef Visual XVisual;")

;; Integer types
(define-c-int-type XAtom)
(define-c-int-type XColormap)
(define-c-int-type XDrawable)
(define-c-int-type XFont)
(define-c-int-type XGContext)
(define-c-int-type XKeySym)
(define-c-int-type XMask)
(define-c-int-type XPixmap)
(define-c-int-type XStatus)
(define-c-int-type XTime)
(define-c-int-type XVisualID)
(define-c-int-type XWindow)
(define-c-int-type XID)

(c-declare "#define XCloseDisplay_debug(DISPLAY) do { printf(\"close display\\n\"); XCloseDisplay(DISPLAY); } while (0)")

;; Struct types
(define-c-type XDepth predicate: XDepth?)
(define-c-type XDisplay predicate: XDisplay? finalizer: XCloseDisplay_debug)
(define-c-type XEvent predicate: XEvent?)
(define-c-type XGC predicate: XGC?)
(define-c-type XImage predicate: XImage?)
(define-c-type XScreen predicate: XScreen?)
(define-c-type XScreenFormat predicate: XScreenFormat?)
(define-c-type XVisual predicate: XVisual?)

;; Functions from the XOpenDisplay man page
(define-c (pointer XDisplay) XOpenDisplay ((maybe-null char*)))
;;(define-c int XCloseDisplay ((pointer XDisplay)))

;; Functions from the AllPlanes man page
(define-c unsigned-long (XBlackPixel "BlackPixel")
  ((pointer XDisplay) int))
(define-c unsigned-long (XWhitePixel "WhitePixel")
  ((pointer XDisplay) int))
(define-c int (XConnectionNumber "ConnectionNumber")
  ((pointer XDisplay)))
(define-c XColormap (XDefaultColormap "DefaultColormap")
  ((pointer XDisplay) int))
(define-c int (XDefaultDepth "DefaultDepth")
  ((pointer XDisplay) int))
;; TODO: XListDepths produces a warning. I don't know why.
;; Xlib.c:193: warning: passing argument 2 of ‘sexp_make_integer’ makes integer from pointer without a cast
;; (define-c (pointer int) XListDepths ((pointer XDisplay) int (pointer int)))
(define-c XGC (XDefaultGC "DefaultGC")
  ((pointer XDisplay) int))
(define-c XWindow (XDefaultRootWindow "DefaultRootWindow")
  ((pointer XDisplay)))
(define-c (pointer XScreen) (XDefaultScreenOfDisplay "DefaultScreenOfDisplay")
  ((pointer XDisplay)))
(define-c int (XDefaultScreen "DefaultScreen")
  ((pointer XDisplay)))
(define-c (pointer XVisual) (XDefaultVisual "DefaultVisual")
  ((pointer XDisplay) int))
(define-c int (XDisplayCells "DisplayCells")
  ((pointer XDisplay) int))
(define-c int (XDisplayPlanes "DisplayPlanes")
  ((pointer XDisplay) int))
(define-c char* (XDisplayString "DisplayString")
  ((pointer XDisplay)))
(define-c long XMaxRequestSize ((pointer XDisplay)))
(define-c long XExtendedMaxRequestSize ((pointer XDisplay)))
(define-c unsigned-long XLastKnownRequestProcessed
  ((pointer XDisplay)))
(define-c unsigned-long (XNextRequest "NextRequest")
  ((pointer XDisplay)))
(define-c int (XProtocolVersion "ProtocolVersion")
  ((pointer XDisplay)))
(define-c int (XProtocolRevision "ProtocolRevision")
  ((pointer XDisplay)))
(define-c int (XQLength "QLength")
  ((pointer XDisplay)))
(define-c XWindow (XRootWindow "RootWindow")
  ((pointer XDisplay) int))
(define-c int (XScreenCount "ScreenCount")
  ((pointer XDisplay)))
(define-c (pointer XScreen) (XScreenOfDisplay "ScreenOfDisplay")
  ((pointer XDisplay) int))
(define-c char* (XServerVendor "ServerVendor")
  ((pointer XDisplay)))
(define-c int (XVendorRelease "VendorRelease")
  ((pointer XDisplay)))

;; Functions from the XCreateWindow man page
(define-c XWindow XCreateSimpleWindow
  ((pointer XDisplay) XWindow int int unsigned-int unsigned-int unsigned-int
   unsigned-long unsigned-long))

;; Functions from the XSelectInput man page
(define-c int XSelectInput ((pointer XDisplay) XWindow long))

;; Functions from the XMapWindow man page
(define-c int XMapWindow ((pointer XDisplay) XWindow))
(define-c int XMapRaised ((pointer XDisplay) XWindow))
(define-c int XMapSubwindows ((pointer XDisplay) XWindow))

;; Functions from the XInternAtom man page
(define-c XAtom XInternAtom ((pointer XDisplay) char* int))
(define-c XStatus XInternAtoms
  ((pointer XDisplay) (pointer char*) int boolean (pointer XAtom)))
(define-c char* XGetAtomName ((pointer XDisplay) XAtom))
(define-c XStatus XGetAtomNames
  ((pointer XDisplay) (pointer XAtom) int (pointer char*)))

;; Functions from the XSetWMProtocols man page
(define-c XStatus XSetWMProtocols
  ((pointer XDisplay) XWindow (pointer XAtom) int))
;; TODO: pointer of pointer (Atom**) not supported
;;(define-c XStatus XGetWMProtocols ((pointer XDisplay) XWindow (pointer XAtom*) (pointer int)))

;; Functions from the XNextEvent man page
(define-c void XNextEvent
  ((pointer XDisplay) (result pointer XEvent)))
(define-c int XPeekEvent
  ((pointer XDisplay) (result pointer XEvent)))
(define-c int XWindowEvent
  ((pointer XDisplay) XWindow long (result pointer XEvent)))
(define-c boolean XCheckWindowEvent
  ((pointer XDisplay) XWindow long (result pointer XEvent)))
(define-c int XMaskEvent
  ((pointer XDisplay) long (result pointer XEvent)))
(define-c boolean XCheckMaskEvent
  ((pointer XDisplay) long (result pointer XEvent)))
(define-c boolean XCheckTypedEvent
  ((pointer XDisplay) int (result pointer XEvent)))
(define-c boolean XCheckTypedWindowEvent
  ((pointer XDisplay) XWindow int (result pointer XEvent)))

;; Functions from the XCreateImage man page
(define-c XStatus XInitImage ((pointer XImage)))
(define-c (pointer XImage) XCreateImage
  ((pointer XDisplay) (pointer XVisual) unsigned-int int int char*
   unsigned-int unsigned-int int int))
(define-c unsigned-long XGetPixel ((pointer XImage) int int))
(define-c int XPutPixel ((pointer XImage) int int unsigned-long))
(define-c (pointer XImage) XSubImage
  ((pointer XImage) int int unsigned-int unsigned-int))
(define-c int XAddPixel ((pointer XImage) long))
(define-c int XDestroyImage ((pointer XImage)))

;; Functions from the XPutImage man page
(define-c int XPutImage 
  ((pointer XDisplay) XDrawable XGC (pointer XImage) int int int int
   unsigned-int unsigned-int))
(define-c (pointer XImage) XGetImage
  ((pointer XDisplay) XDrawable int int unsigned-int unsigned-int
   unsigned-long int))
(define-c (pointer XImage) XGetSubImage
  ((pointer XDisplay) XDrawable int int unsigned-int unsigned-int
   unsigned-long int (pointer XImage) int int))

;; XEvent (XAnyEvent)
(c-declare "#define XEventType(event) ((event)->type)")
(c-declare "#define XEventSerial(event) ((event)->xany.serial)")
(c-declare "#define XEventSendEvent(event) ((event)->xany.send_event)")
(c-declare "#define XEventDisplay(event) ((event)->xany.display)")
(c-declare "#define XEventWindow(event) ((event)->xany.window)")
(define-c int XEventType ((pointer XEvent)))
(define-c unsigned-long XEventSerial ((pointer XEvent)))
(define-c boolean XEventSendEvent ((pointer XEvent)))
(define-c (pointer XDisplay) XEventDisplay ((pointer XEvent)))
(define-c XWindow XEventWindow ((pointer XEvent)))

;; XButtonEvent
(c-declare "#define XIsButtonPressedEvent(event) (XEventType(event) == ButtonPress)")
(c-declare "#define XIsButtonReleasedEvent(event) (XEventType(event) == ButtonRelease)")
(c-declare "#define XIsButtonEvent(event) (XIsButtonPressedEvent(event) || XIsButtonReleasedEvent(event))")
(define-c boolean (XButtonPressedEvent? "XIsButtonPressedEvent") ((pointer XEvent)))
(define-c boolean (XButtonReleasedEvent? "XIsButtonReleasedEvent") ((pointer XEvent)))
(define-c boolean (XButtonEvent? "XIsButtonEvent") ((pointer XEvent)))
(c-declare "#define XButtonEventRoot(event) ((event)->xbutton.root)")
(c-declare "#define XButtonEventSubwindow(event) ((event)->xbutton.subwindow)")
(c-declare "#define XButtonEventTime(event) ((event)->xbutton.time)")
(c-declare "#define XButtonEventX(event) ((event)->xbutton.x)")
(c-declare "#define XButtonEventY(event) ((event)->xbutton.y)")
(c-declare "#define XButtonEventXRoot(event) ((event)->xbutton.x_root)")
(c-declare "#define XButtonEventYRoot(event) ((event)->xbutton.y_root)")
(c-declare "#define XButtonEventState(event) ((event)->xbutton.state)")
(c-declare "#define XButtonEventButton(event) ((event)->xbutton.button)")
(c-declare "#define XButtonEventSameScreen(event) ((event)->xbutton.same_screen)")
(define-c XWindow (XButtonEventRoot "XButtonEventRoot") ((pointer XEvent)))
(define-c XWindow (XButtonEventSubwindow "XButtonEventSubwindow") ((pointer XEvent)))
(define-c XTime (XButtonEventTime "XButtonEventTime") ((pointer XEvent)))
(define-c int (XButtonEventX "XButtonEventX") ((pointer XEvent)))
(define-c int (XButtonEventY "XButtonEventY") ((pointer XEvent)))
(define-c int (XButtonEventXRoot "XButtonEventXRoot") ((pointer XEvent)))
(define-c int (XButtonEventYRoot "XButtonEventYRoot") ((pointer XEvent)))
(define-c unsigned-int (XButtonEventState "XButtonEventState") ((pointer XEvent)))
(define-c unsigned-int (XButtonEventButton "XButtonEventButton") ((pointer XEvent)))
(define-c boolean (XButtonEventSameScreen "XButtonEventSameScreen") ((pointer XEvent)))

;; XExposeEvent
(c-declare "#define XIsExposeEvent(event) (XEventType(event) == Expose)")
(define-c boolean (XExposeEvent? "XIsExposeEvent") ((pointer XEvent)))
(c-declare "#define XExposeEventX(event) ((event)->xexpose.x)")
(c-declare "#define XExposeEventY(event) ((event)->xexpose.y)")
(c-declare "#define XExposeEventWidth(event) ((event)->xexpose.width)")
(c-declare "#define XExposeEventHeight(event) ((event)->xexpose.height)")
(c-declare "#define XExposeEventCount(event) ((event)->xexpose.count)")
(define-c int (XExposeEventX "XExposeEventX") ((pointer XEvent)))
(define-c int (XExposeEventY "XExposeEventY") ((pointer XEvent)))
(define-c int (XExposeEventWidth "XExposeEventWidth") ((pointer XEvent)))
(define-c int (XExposeEventHeight "XExposeEventHeight") ((pointer XEvent)))
(define-c int (XExposeEventCount "XExposeEventCount") ((pointer XEvent)))

;; XClientMessageEvent
(c-declare "#define XIsClientMessageEvent(event) (XEventType(event) == ClientMessage)")
(define-c boolean (XClientMessageEvent? "XIsClientMessageEvent") ((pointer XEvent)))
(c-declare "#define XClientMessageEventType(event) ((event)->xclient.message_type)")
(c-declare "#define XClientMessageEventFormat(event) ((event)->xclient.format)")
(c-declare "#define XClientMessageEventDataAtom0(event) ((event)->xclient.data.l[0])")
(define-c XAtom XClientMessageEventType ((pointer XEvent)))
(define-c int XClientMessageEventFormat ((pointer XEvent)))
(define-c long XClientMessageEventDataAtom0 ((pointer XEvent)))

;; C macros for other struct fields
(c-declare "#define XVisualClass(visual) ((visual)->class)")

;; Some getter functions for other struct fields
(define-c int XVisualClass ((pointer XVisual)))
